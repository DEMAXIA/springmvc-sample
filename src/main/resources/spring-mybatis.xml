<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 载入properties配置文件-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="location" value="classpath:jdbc.properties"/>-->
    <!--&lt;!&ndash;<property name="locations">&ndash;&gt;-->
    <!--&lt;!&ndash;<list>&ndash;&gt;-->
    <!--&lt;!&ndash;<value>classpath:jdbc.properties</value>&ndash;&gt;-->
    <!--&lt;!&ndash;</list>&ndash;&gt;-->
    <!--&lt;!&ndash;</property>&ndash;&gt;-->
    <!--</bean>-->

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbcUrl}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>

        <!--<property name="driverClassName" value="${driverClassName}"/>-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${jdbcUrl}"/>-->
        <!--<property name="username" value="${username}"/>-->
        <!--<property name="password" value="${password}"/>-->
        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${initialSize}"/>-->
        <!--<property name="minIdle" value="${minIdle}"/>-->
        <!--<property name="maxActive" value="${maxActive}"/>-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${maxWait}"/>-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>-->
        <!--<property name="validationQuery" value="${validationQuery}"/>-->
        <!--<property name="testWhileIdle" value="${testWhileIdle}"/>-->
        <!--<property name="testOnBorrow" value="${testOnBorrow}"/>-->
        <!--<property name="testOnReturn" value="${testOnReturn}"/>-->
        <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
        <!--<property name="poolPreparedStatements" value="${poolPreparedStatements}"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
        <!--value="${maxPoolPreparedStatementPerConnectionSize}"/>-->
        <!--&lt;!&ndash; 配置监控统计拦截的filters，去掉后监控界面sql无法统计 &ndash;&gt;-->
        <!--<property name="filters" value="stat"/>-->
    </bean>

    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-cfg.xml"/>-->
        <property name="mapperLocations" value="classpath:mappers/*.mapper.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.bee.entity"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bee.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- ===================================事务的配置================================== -->

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器  -->
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
    <!-- 优先级：如果配置冲突，注解的比xml的高 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="login*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="regist*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>-->
            <!--<tx:method name="getAll*" propagation="REQUIRED" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!-- 配置哪些类的方法进行事务管理 -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="allManagerMethod" expression="execution (* com.bee.service.*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>-->
    <!--</aop:config>-->

</beans>
